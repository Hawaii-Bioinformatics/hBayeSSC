{"name":"hBayeSSC","tagline":"A python script that wraps around serial simcoal in order to simulate a multi-taxa community undergoing a coordinated demographic expansion","body":"hBayeSSC is a python script that wraps around serial simcoal in order to simulate a multi-taxa community undergoing a coordinated demographic expansion.\r\n\r\n## Requirements\r\nThe applications required to produce a set of simulations with multitaxa summary statistics for the hABC analysis described in Chan et al. 2014  \r\n \r\n *  [BayeSSC - Serial Simcoal](http://www.stanford.edu/group/hadlylab/ssc/)   \r\n *  [Python 2.x](https://www.python.org/) >= 2.4   \r\n *  hBayeSSC.py\r\n *  [msReject](#msreject-module)\r\n\r\n\r\n## Input files\r\nThe input files needed to produce a set of simulations with multitaxa summary statistics for the hABC analysis described in Chan et al. 2014 \r\n *  A table of observed summary statistics for each taxon in the community. ([details](#observation-summary-statistics))\r\n *  An input par file for serial simcoal. ([details](#par-file))\r\n\r\n### Observation summary statistics\r\n[Sample observation file](/example_data/example_obs)  \r\n\r\nThe table of observed summary statistics consists of columns with the following header names.  hBayeSSC replaces the appropriate line in the par file with these values:\r\n\r\n| Column name | Description |\r\n| ----------- | ----------- |\r\n| species     | Name of taxa |\r\n| nsam        | number of samples to be simulated |\r\n| nsites      | Number of base pairs |\r\n| tstv        | % transitions |\r\n| gamma       | Gamma shape parameter |\r\n| gen         | Numbers of years per generation |\r\n| locuslow    | Low estimate of the locus mutation rate per generation |\r\n| locushigh   | High estimate of the locus mutation rate per generation |\r\n| Nelow       | Low estimate for effective population size |\r\n| Nehigh      | High estimate for effective population size |\r\n| SegSites    | Segregating sites |\r\n| nucdiv      | Nucleotide diversity |\r\n| Haptypes    | Number of haplotypes |\r\n| HapDiver    | Haplotypic diversity |\r\n| TajimasD    | Tajima's D |\r\n| F*          | Fu's F |\r\n\r\nA more complete description of these values can be found on the [BayeSSC website](http://www.stanford.edu/group/hadlylab/ssc/)\r\n\r\n### par file\r\n[Sample par file](/example_data/example.par)  \r\n\r\nThe par file contains one prior which is not individually replaced, such as expansion magnitude (under historical events) and will apply to all populations.\r\n\r\n## Usage\r\n\r\nAn example command to run 200 iterations of each model from 0/32 to 32/32 species with a prior on the maximum expansion time of 1000 to 500000 years would be: \r\n```\r\npython hBayeSSC.py --mode initial -p example.par -i example_obs -r 200 -u full -b ./BayeSSC -t 1000:500000\r\n```\r\n\r\nThis command will create the observed hyperstats file for the rejection analysis: \r\n```\r\npython hBayeSSC.py --mode initial -p example.par -i example_obs -r 200 -u full -b ./BayeSSC -t 1000:500000 --obs_hyperstats\r\n```\r\n\r\n## Options\r\nThe hBayeSSC has several command line options, which can be found using the -h option when executing the script.  \r\n\r\n```  \r\n#> python hBayeSSC.py -h\r\n\r\nUsage: hBayeSSC.py [options]\r\n\r\nOptions:\r\n  -h, --help            show this help message and exit\r\n  --mode=MODE           program operation mode [ 'initial', 'posterior' ]\r\n                        [required]\r\n  -p FILE, --par=FILE   par file template [required]\r\n  -i FILE, --obs=FILE   Observation file [required]\r\n  -r NUM, --repeat=NUM  Number of times to try a given congruent group size\r\n                        [required]\r\n  -u UID, --uid=UID     Unique ID to prefix generated indices [required]\r\n  -b PATH, --bayepath=PATH\r\n                        Path to BayeSSC application [default: Located on user\r\n                        PATH]\r\n  --only_hyperstats     When set, will only generate the hyperstats file\r\n  --print_headers       When set will generate a headers.txt and exit\r\n  -o PATH, --outdir=PATH\r\n                        Directory to generate final outputs in (will create\r\n                        missing folders) [default: <working directory> ]\r\n\r\n  Regular Run:\r\n    Options to be applied during mode 'initial'\r\n\r\n    -m MODEL, --model=MODEL\r\n                        Run a single model (0 to total entries in observation\r\n                        file) [default: run all models]\r\n    -l TYPE, --LPType=TYPE\r\n                        Loci Rate Priori Type\r\n    -t RANGE, --timerange=RANGE\r\n                        The range of values to select the time from\r\n                        (Integers). Example: 1000:20000  [required]\r\n    --obs_stats         When set, will generate a statistics output for the\r\n                        observation data\r\n\r\n  Posterior Run:\r\n    Options to be applied during mode 'posterior'\r\n\r\n    --uid_list=FILE     Speccifies a list of UIDs to filter on for Posterior\r\n                        processing [required]\r\n    --run_data=FILE     run data which contains the --uid_list UIDs.  It is\r\n                        used for the Posterior processing [required]\r\n```  \r\n\r\n------------------------------------------------------------------------------------\r\n\r\n\r\n##msReject module\r\nWe use this command with a reference table of 200,000 iterations per model to do the initial acceptance of 10,000 using msReject. \r\n```\r\nmsReject hyperstats_observations.txt reference_table.txt 0.0015151515151515151515 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 > Posterior\r\n```\r\nInstructions for installing the msReject module of msBayes can be found here:\r\n[Instructions](https://docs.google.com/document/d/1enMQaogxOs0RppAmE8KcGU3nNjzotuiycAl6I1s0KYg/edit)\r\n\r\nThen we use the following R-script and abc.R to do the final 1,000 acceptance and parameter estimation using local linear regression.\r\n\r\n```\r\nlibrary(VGAM)\r\nlibrary(locfit)\r\nlibrary(abc)\r\n\r\n#load the posterior file of 10,000 acceptances from msreject\r\nPrior32 <- read.table(\"Posterior\", sep=\"\\t\", header = F)\r\nPOSTVEC32<- Prior32[,c(17:32)]\r\n\r\n#load summary statistics for observed data (produced by hBayeSSC.py)\r\nMZ_OBS<- read.table(\"hyperstats_observations.txt\", sep=\"\\t\", header = F)\r\nOBS<- MZ_OBS[,c(17:32)] \r\n\r\n#########back transform function####################\r\n\r\n#replace 32 with the number of species\r\nbacktrans_z <- function(val){\r\n\t    val <- val*32\r\n\t    if(val <= 0.5) {out <- 0}\r\n\t    else if((32-0.5) < val) {out <- 32}\r\n\t    else {out <- round(val,digit=0)}\r\n\t    out <- out/32\r\n\t    return(out)\r\n\t    }\r\n\r\n##########start estimating z-value #################\r\n\r\nZ1true1<- MZ_OBS[,4]\r\nZVALUE32 <- Prior32[,4]\r\nRANVALUE1 <- ranprior[,4]\r\n\r\nRANVALUE <- sample(RANVALUE1, 1000)\r\n\r\nZVALUE32_LL <- abc(OBS, ZVALUE32, POSTVEC32, tol=0.1,method=\"loclinear\")\r\n\r\nZVALUE32_BT <- sapply(ZVALUE32_LL$adj.values,backtrans_z)\r\nZVALUE32_BT_mode <- loc1stats(ZVALUE32_BT, prob=0.95)[1]\r\nZVALUE32_BT_mode\r\n\r\nsummary(ZVALUE32_BT)\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}